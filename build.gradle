plugins {
	id 'org.springframework.boot' version '2.5.2' apply false
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version '2.8'
	id 'maven-publish'
}

group = 'com.searchservice.ingress.lib'

//SNAPSHOT-REPO-VERSION
//version = '0.0.1-SNAPSHOT'

//RELEASE-AND PROXY-REPO-VERSION 
version = '0.0.1-RELEASE'

//MIXED-VERSION 
//version = '0.0.1-MIXED'
sourceCompatibility = '11'

apply from: "gradle/sonar.gradle"
//apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
        	//SNAPSHOT-REPO
        	//version = '1.0-SNAPSHOT'
        	
        	//RELEASE-REPO
        	version = '1.0-RELEASE'
        	
        	//PROXY-REPO
        	//version = '1.0-PROXY'
        	
        	//MIXED-REPO
        	//version = '1.0-MIXED'
            artifact("/build/libs/clientlib.jar"){
                extension 'jar'
            }
        }
    }
    repositories {
	    maven {
			name 'nexus'
			url 'http://localhost:8081/repository/nexus-client-ingress-release/'
			//url 'http://localhost:8081/repository/nexus-client-ingress-snapshot/'
			//url 'http://localhost:8081/repository/nexus-client-ingress-proxy/'
			//url 'http://localhost:8081/repository/nexus-client-ingress-group/'
			allowInsecureProtocol = true
			credentials {
				username project.nexusUsername
				password project.nexusPassword
			}
		}
	}
}



dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}

//// create FAT jar ////
task clientLibraryCustomJar(type: Jar) {
	
	//bootRepackage.enabled = false
	zip64 = true
	
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	manifest {
		//attributes 'Main-Class': 'com.solr.clientwrapper.BasicSampleApp'
	}
	//baseName = 'clientlib'
	archivesBaseName = 'clientlib'
	if (project.hasProperty('projVersion')) {
	  project.version = project.projVersion
	} else {
	  project.version = ''
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	with jar
}

apply plugin: "eclipse"
test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}
task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx256m'
    if (project.hasProperty('testcontainers')) {
        environment 'spring.profiles.active', 'testcontainers'
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

jacocoTestReport {
	getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}

dependencies {
 	implementation 'org.springframework.boot:spring-boot-starter-web:2.6.2'
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compileOnly 'org.projectlombok:lombok:1.18.22'
	 annotationProcessor 'org.projectlombok:lombok:1.18.22'
	
	 testCompileOnly 'org.projectlombok:lombok:1.18.22'
	 testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
	 implementation "org.apache.commons:commons-lang3"
	 // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.1'
	implementation group: 'org.json', name: 'json', version: '20200518' 
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.1'

	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.13.1'
	 //sonar
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
	 
	// https://mvnrepository.com/artifact/joda-time/joda-time
	implementation group: 'joda-time', name: 'joda-time', version: '2.10.13'
}

repositories {
	mavenCentral()
	//// create FAT jar ////
    jcenter()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}